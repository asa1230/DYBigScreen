<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xsi:schemaLocation="   
          http://www.springframework.org/schema/beans   
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
          http://www.springframework.org/schema/tx   
          http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
          http://www.springframework.org/schema/context   
          http://www.springframework.org/schema/context/spring-context-3.0.xsd   
          http://www.springframework.org/schema/aop   
          http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	
	<aop:aspectj-autoproxy proxy-target-class="true"/> 
    <!-- 导入属性配置文件 -->
   <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
       	<property name="locations">
       	<list>
       	<value>classpath:datasource.properties</value>
       	<!--配置的是接口参数信息  -->
       	<value>classpath:interfaces.properties</value>
       	</list>
       	</property>
        <!-- <property name="locations" value="classpath:datasource.properties"/> -->
    </bean>
    <!--生产环境中使用-->
     
   <!-- <bean id="dataSource_container" class="org.springframework.jndi.JndiObjectFactoryBean">
      <property name="jndiName" value="java:comp/env/com.dayang.datasource.dybigscreen"/>
    </bean> -->
    
    
    <!-- 导入属性配置文件，引入数据源方式一,读配置文件 -->
	<context:property-placeholder location="classpath:datasource.properties"/>
	 <bean id="dataSource_container" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driverclass}" />
		<property name="url" value="${jdbcurl}" />
		<property name="username" value="${user}" />
		<property name="password" value="${password}" />
	 </bean>
	
	
	<bean id="SpringContextUtil" class="com.dayang.newmedia.common.utils.SpringContextUtil" scope="singleton"></bean>

    <!-- 开启注解配置 enable autowire-->
    <context:annotation-config />

    <!-- 扫描service层 -->
    <context:component-scan base-package="com.dayang.newmedia.newscommand.service" />
   	<!-- 20171108zkx针对新版本大屏的功能和需求（此版本DYBigScreen项目不再从数据库获取页面展示的内容，只
   	从多个接口中获取资源展示到页面），之前的代码可能会出现冗余，也为了避免和之前的代码混淆，因此重新定义了service层和controller层，
   	用来区分之前的service层和controller层 -->
    <context:component-scan base-package="com.dayang.newmedia.newscommand.interfaces.service" />


    <!-- 自动扫描映射器 -->
    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dayang.newmedia.newscommand.db"/>
    </bean>

    <!-- 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource_container"/>
    </bean>

    <!--定义常见的数据库以及别名，这样可以在sql语句的xml文件中引用，根据不同的数据库来书写特定数据库的sql语句-->
    <bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="SQL Server">sqlserver</prop>
                <prop key="DB2">db2</prop>
                <prop key="Oracle">oracle</prop>
                <prop key="MySQL">mysql</prop>
                <prop key="PostgreSQL">postgresql</prop>
                <prop key="Derby">derby</prop>
            </props>
        </property>
    </bean>

    <bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
         <property name="properties" ref="vendorProperties"/>
    </bean>

	<bean id="sqlSessionFactory" class="com.dayang.newmedia.newscommand.db.model.CheckMyBatis">
   	<!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="typeHandlersPackage" value="com.dayang.newmedia.newscommand.db.typehandler"/>
        <property name="mapperLocations" value="classpath*:com/dayang/newmedia/newscommand/db/mapping/**/*.xml"/>
        <property name="dataSource" ref="dataSource_container"/>
        <property name="databaseIdProvider" ref="databaseIdProvider"/>
    </bean>


    <tx:annotation-driven />

</beans>
